{"version":3,"file":"static/js/619.2ac78039.chunk.js","mappings":"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","sources":["webpack://portfolio/./src/components/Contact/ContactForm.module.css?33d5","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/send/send.js","components/Contact/ContactForm.js","pages/ContactPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactForm_contact__xDFmX\",\"form\":\"ContactForm_form__fso+s\",\"success\":\"ContactForm_success__MVX1y\",\"error\":\"ContactForm_error__5V4Z7\"};","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useState } from 'react';\nimport styles from './ContactForm.module.css';\nimport emailjs from 'emailjs-com';\n\nconst ContactForm = () => {\n    const [formData, setFormData] = useState({\n      name: '',\n      email: '',\n      message: '',\n    });\n  \n    const [status, setStatus] = useState(null); // Success or error\n  \n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: value,\n      }));\n    };\n  \n    const handleSubmit = (e) => {\n      e.preventDefault();\n  \n      emailjs\n        .send(\n          'YOUR_SERVICE_ID',\n          'YOUR_TEMPLATE_ID',\n          formData,\n          'YOUR_USER_ID'\n        )\n        .then(\n          (response) => {\n            console.log('SUCCESS!', response.status, response.text);\n            setStatus('success');\n            setFormData({ name: '', email: '', message: '' });\n          },\n          (error) => {\n            console.log('FAILED...', error);\n            setStatus('error');\n          }\n        );\n    };\n  \n    return (\n      <section aria-labelledby=\"contact-heading\" className={styles.contact}>\n        <h2 id=\"contact-heading\">Contact Me</h2>\n        <form onSubmit={handleSubmit} className={styles.form}>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n  \n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n  \n          <label htmlFor=\"message\">Message</label>\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            rows=\"5\"\n            value={formData.message}\n            onChange={handleChange}\n            required\n          ></textarea>\n  \n          <button type=\"submit\">Send Message</button>\n        </form>\n        {status === 'success' && (\n          <p className={styles.success}>Message sent successfully!</p>\n        )}\n        {status === 'error' && (\n          <p className={styles.error}>\n            There was an error sending your message.\n          </p>\n        )}\n      </section>\n    );\n  };\n  \nexport default ContactForm;\n","// src/pages/ContactPage.js\nimport React from 'react';\nimport ContactForm from '../components/Contact/ContactForm';\n\nconst ContactPage = () => {\n  return (\n    <main>\n      <ContactForm />\n    </main>\n  );\n};\n\nexport default ContactPage;\n"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","ContactForm","formData","setFormData","useState","name","email","message","setStatus","handleChange","e","value","prevData","_objectSpread","_jsxs","className","styles","children","_jsx","id","onSubmit","preventDefault","emailjs","then","response","console","log","error","htmlFor","type","onChange","required","rows","ContactPage"],"sourceRoot":""}